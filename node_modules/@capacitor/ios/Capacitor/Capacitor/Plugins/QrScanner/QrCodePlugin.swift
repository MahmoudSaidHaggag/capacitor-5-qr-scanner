import Foundation

/**
 * Please read the Capacitor iOS Plugin Development Guide
 * here: https://capacitorjs.com/docs/plugins/ios
 */
@objc(QrScanner)
public class QrScanner: CAPPlugin {
 
    private var qrController:QRScannerViewController?
    private lazy var closeButton:UIButton = {
       
        let button = UIButton.init(type: .custom);
        
        let path = Bundle.init(for: NSClassFromString("QrScanner")!.self).resourcePath! + "/QRScanner.bundle";
        let bundle = Bundle(path: path)!
        button.setImage(UIImage(named: "close_Qr.png", in:  bundle, compatibleWith: nil), for: .normal);
        
        let SW = UIScreen.main.bounds.size.width;
        let STATUS_H = UIApplication.shared.statusBarFrame.size.height;

        button.frame = CGRect.init(x: SW-50, y: STATUS_H+10, width: 45, height: 45);
        button.imageEdgeInsets = UIEdgeInsets.init(top: 15, left: 15, bottom: 15, right: 15);
        button.addTarget(self, action: #selector(closeQR), for: .touchUpInside);
        return button;
        
    }()
    
    @objc func closeQR(){
        self.qrController!.dismiss(animated: true, completion: nil);
    }
    
    var backCall:CAPPluginCall?
    @objc func scanQrCode(_ call: CAPPluginCall) {

        backCall = call;
        DispatchQueue.main.async {
            self.qrController = QRScannerViewController();
            self.qrController!.delegate = self;
            self.qrController!.modalPresentationStyle = .fullScreen
            self.qrController!.view.addSubview(self.closeButton);
            self.bridge.viewController.present(self.qrController!, animated: true, completion: nil)
            
        }
    }
}

extension QrScanner:QRScannerDelegate{
    public func qrScannerDidSuccess(scanner: QRScannerViewController, result: String) {
        print("扫描结果：\(result)");
        scanner.dismiss(animated: true, completion: nil)
        if let backResponse = backCall {
            backResponse.resolve([
              "result": result,
            ])
        }
    }
    
    public func qrScannerDidFail(scanner: QRScannerViewController, error: QRScannerError) {
        
        print("扫描失败：\(error.localizedDescription)")
        scanner.dismiss(animated: true, completion: nil)
        if let backResponse = backCall {
            backResponse.resolve([
              "result": "",
            ])
        }
        
    }
}
